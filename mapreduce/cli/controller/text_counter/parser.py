"""
Defines the argument parser to use when the task of text counting has been
selected
"""
# Libraries
import argparse
from .constant import SPLIT_SIZE_MIN, SPLIT_SIZE_DEFAULT,\
                      READ_SIZE_MIN, READ_SIZE_DEFAULT,\
                      REDUCE_SIZE_MIN, REDUCE_SIZE_DEFAULT

from .validator import positive_integer, positive_integer_or_zero


# Parser generators
def create_parser():
    """
    Creates an argument parser for the controller and returns it

    Returns:
        ArgumentParser: controller argument parser
    """
    parser = argparse.ArgumentParser(
        # prog = ''
        # usage = (generated by default)
        description="""Uses the map-reduce paradigm for counting words given one
        or more files and outputs to stdout the count of words per file""",
        epilog="<> with â™¥ by @ccebrecos and @davidlj95 at ETSE UAB, Spain",
        add_help=False
    )
    return parser


def create_parser_options(parser):
    """
    Given a parser, adds required arguments to it by the controller and returns
    the parser

    Args:
        ArgumentParser: argument parser to fill
    Returns:
        ArgumentParser: filled argument parser
    """
    # Input files
    parser.add_argument(
        "input_files",
        action="store",
        help="""specifies the input files to read text from. Those files will be
        processed one by one and the output will be separed by each file.
        If you want to join all the results producing a single result for
        the count of all files, use the merge argument""",
        type=str,
        nargs="+"
    )

    # Merge file counts
    parser.add_argument(
        "-m", "--merge",
        action="store_true",
        help="""if present, merges all the word counts from all the files
        producing a single output with the count of words for all files
        merged""",
        default=False
    )

    # Count letters
    parser.add_argument(
        "--letters",
        action="store_true",
        help="""if present, will count letters instead of words""",
        default=False
    )

    # Hide output
    parser.add_argument(
        "--no-out",
        action="store_true",
        help="""disables the output, used for timing""",
        default=False
    )

    # Sizes
    parser.add_argument(
        "--read-size",
        action="store",
        help="""number of characters to read each time from the file. If the
        read size is 0, then file is read by lines. After each line or number
        of characters is read, a split is tried to generate and sent if is
        greater than split size or buffered if is less. Minimum is %d.
        Default is %d""" % (READ_SIZE_MIN, READ_SIZE_DEFAULT),
        type=positive_integer_or_zero,
        default=READ_SIZE_DEFAULT
    )
    parser.add_argument(
        "--split-size",
        action="store",
        help="""number of words (or letters if --letters is present) to save
        on a buffer while reading a file to don't send to map any split that
        contains less than the specified number of letters or words.
        Minimum to set: %d (accept any split size, do not buffer).
        Default is %d""" % (SPLIT_SIZE_MIN, SPLIT_SIZE_DEFAULT),
        type=positive_integer,
        default=SPLIT_SIZE_DEFAULT
    )
    parser.add_argument(
        "--reduce-size",
        action="store",
        help="""number of items to accumulate before performing a reduce task.
        This way until not enough items are present, a reduce task won't be
        launched. Minimum is %d. We can't reduce a single item. It's non-sense
        Default is %d""" % (REDUCE_SIZE_MIN, REDUCE_SIZE_DEFAULT),
        type=positive_integer,
        default=REDUCE_SIZE_DEFAULT
    )
    return parser


def create_full_parser():
    """
    Returns the full parser

    Returns:
        ArgumentParser: controller official parser filled with options
    """
    return create_parser_options(create_parser())
